// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api/auth/info)
	GetAuthInfo(ctx echo.Context) error

	// (POST /api/auth/token)
	PostAuthToken(ctx echo.Context, params PostAuthTokenParams) error

	// (GET /api/auth/whoami)
	GetAuthWhoAmI(ctx echo.Context) error

	// (POST /api/cluster/action/abort)
	PostClusterActionAbort(ctx echo.Context) error

	// (POST /api/cluster/action/freeze)
	PostClusterActionFreeze(ctx echo.Context) error

	// (POST /api/cluster/action/unfreeze)
	PostClusterActionUnfreeze(ctx echo.Context) error

	// (GET /api/cluster/config)
	GetClusterConfig(ctx echo.Context, params GetClusterConfigParams) error

	// (PATCH /api/cluster/config)
	PatchClusterConfig(ctx echo.Context, params PatchClusterConfigParams) error

	// (GET /api/cluster/config/file)
	GetClusterConfigFile(ctx echo.Context) error

	// (PUT /api/cluster/config/file)
	PutClusterConfigFile(ctx echo.Context) error

	// (POST /api/cluster/join)
	PostClusterJoin(ctx echo.Context, params PostClusterJoinParams) error

	// (POST /api/cluster/leave)
	PostClusterLeave(ctx echo.Context, params PostClusterLeaveParams) error

	// (GET /api/cluster/status)
	GetClusterStatus(ctx echo.Context, params GetClusterStatusParams) error

	// (GET /api/instance)
	GetInstances(ctx echo.Context, params GetInstancesParams) error

	// (POST /api/instance/path/{namespace}/{kind}/{name}/progress)
	PostInstanceProgress(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (POST /api/instance/path/{namespace}/{kind}/{name}/status)
	PostInstanceStatus(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (GET /api/network)
	GetNetworks(ctx echo.Context, params GetNetworksParams) error

	// (GET /api/network/ip)
	GetNetworkIP(ctx echo.Context, params GetNetworkIPParams) error

	// (GET /api/node)
	GetNodes(ctx echo.Context, params GetNodesParams) error

	// (GET /api/node/info)
	GetNodesInfo(ctx echo.Context) error

	// (POST /api/node/name/{nodename}/action/abort)
	PostPeerActionAbort(ctx echo.Context, nodename InPathNodeName) error

	// (POST /api/node/name/{nodename}/action/clear)
	PostNodeActionClear(ctx echo.Context, nodename InPathNodeName) error

	// (POST /api/node/name/{nodename}/action/drain)
	PostPeerActionDrain(ctx echo.Context, nodename InPathNodeName) error

	// (POST /api/node/name/{nodename}/action/freeze)
	PostPeerActionFreeze(ctx echo.Context, nodename InPathNodeName, params PostPeerActionFreezeParams) error

	// (POST /api/node/name/{nodename}/action/push/asset)
	PostNodeActionPushAsset(ctx echo.Context, nodename InPathNodeName, params PostNodeActionPushAssetParams) error

	// (POST /api/node/name/{nodename}/action/push/disk)
	PostNodeActionPushDisk(ctx echo.Context, nodename InPathNodeName, params PostNodeActionPushDiskParams) error

	// (POST /api/node/name/{nodename}/action/push/patch)
	PostNodeActionPushPatch(ctx echo.Context, nodename InPathNodeName, params PostNodeActionPushPatchParams) error

	// (POST /api/node/name/{nodename}/action/push/pkg)
	PostNodeActionPushPkg(ctx echo.Context, nodename InPathNodeName, params PostNodeActionPushPkgParams) error

	// (POST /api/node/name/{nodename}/action/scan/capabilities)
	PostNodeActionScanCapabilities(ctx echo.Context, nodename InPathNodeName, params PostNodeActionScanCapabilitiesParams) error

	// (POST /api/node/name/{nodename}/action/sysreport)
	PostNodeActionSysreport(ctx echo.Context, nodename InPathNodeName, params PostNodeActionSysreportParams) error

	// (POST /api/node/name/{nodename}/action/unfreeze)
	PostPeerActionUnfreeze(ctx echo.Context, nodename InPathNodeName, params PostPeerActionUnfreezeParams) error

	// (GET /api/node/name/{nodename}/capabilities)
	GetNodeCapabilities(ctx echo.Context, nodename InPathNodeName) error

	// (GET /api/node/name/{nodename}/config)
	GetNodeConfig(ctx echo.Context, nodename InPathNodeName, params GetNodeConfigParams) error

	// (PATCH /api/node/name/{nodename}/config)
	PatchNodeConfig(ctx echo.Context, nodename InPathNodeName, params PatchNodeConfigParams) error

	// (GET /api/node/name/{nodename}/config/file)
	GetNodeConfigFile(ctx echo.Context, nodename InPathNodeName) error

	// (PUT /api/node/name/{nodename}/config/file)
	PutNodeConfigFile(ctx echo.Context, nodename InPathNodeName) error

	// (POST /api/node/name/{nodename}/daemon/action/restart)
	PostDaemonRestart(ctx echo.Context, nodename InPathNodeName) error

	// (POST /api/node/name/{nodename}/daemon/action/shutdown)
	PostDaemonShutdown(ctx echo.Context, nodename InPathNodeName, params PostDaemonShutdownParams) error

	// (POST /api/node/name/{nodename}/daemon/action/stop)
	PostDaemonStop(ctx echo.Context, nodename InPathNodeName) error

	// (GET /api/node/name/{nodename}/daemon/dns/dump)
	GetDaemonDNSDump(ctx echo.Context, nodename InPathNodeName) error

	// (GET /api/node/name/{nodename}/daemon/event)
	GetDaemonEvents(ctx echo.Context, nodename InPathNodeName, params GetDaemonEventsParams) error

	// (POST /api/node/name/{nodename}/daemon/hb/name/{name}/action/restart)
	PostDaemonHeartbeatRestart(ctx echo.Context, nodename InPathNodeName, name InPathHeartbeatName) error

	// (POST /api/node/name/{nodename}/daemon/hb/name/{name}/action/start)
	PostDaemonHeartbeatStart(ctx echo.Context, nodename InPathNodeName, name InPathHeartbeatName) error

	// (POST /api/node/name/{nodename}/daemon/hb/name/{name}/action/stop)
	PostDaemonHeartbeatStop(ctx echo.Context, nodename InPathNodeName, name InPathHeartbeatName) error

	// (POST /api/node/name/{nodename}/daemon/listener/name/{name}/action/restart)
	PostDaemonListenerRestart(ctx echo.Context, nodename InPathNodeName, name InPathListenerName) error

	// (POST /api/node/name/{nodename}/daemon/listener/name/{name}/action/start)
	PostDaemonListenerStart(ctx echo.Context, nodename InPathNodeName, name InPathListenerName) error

	// (POST /api/node/name/{nodename}/daemon/listener/name/{name}/action/stop)
	PostDaemonListenerStop(ctx echo.Context, nodename InPathNodeName, name InPathListenerName) error

	// (POST /api/node/name/{nodename}/daemon/listener/name/{name}/log/control)
	PostDaemonListenerLogControl(ctx echo.Context, nodename InPathNodeName, name InPathListenerName) error

	// (POST /api/node/name/{nodename}/daemon/log/control)
	PostDaemonLogControl(ctx echo.Context, nodename InPathNodeName) error

	// (GET /api/node/name/{nodename}/drbd/allocation)
	GetNodeDRBDAllocation(ctx echo.Context, nodename InPathNodeName) error

	// (GET /api/node/name/{nodename}/drbd/config)
	GetNodeDRBDConfig(ctx echo.Context, nodename InPathNodeName, params GetNodeDRBDConfigParams) error

	// (POST /api/node/name/{nodename}/drbd/config)
	PostNodeDRBDConfig(ctx echo.Context, nodename InPathNodeName, params PostNodeDRBDConfigParams) error

	// (GET /api/node/name/{nodename}/drivers)
	GetNodeDriver(ctx echo.Context, nodename InPathNodeName) error

	// (GET /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name})
	GetInstance(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (POST /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/boot)
	PostInstanceActionBoot(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName, params PostInstanceActionBootParams) error

	// (POST /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/delete)
	PostInstanceActionDelete(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName, params PostInstanceActionDeleteParams) error

	// (POST /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/freeze)
	PostInstanceActionFreeze(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName, params PostInstanceActionFreezeParams) error

	// (POST /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/provision)
	PostInstanceActionProvision(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName, params PostInstanceActionProvisionParams) error

	// (POST /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/prstart)
	PostInstanceActionPRStart(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName, params PostInstanceActionPRStartParams) error

	// (POST /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/prstop)
	PostInstanceActionPRStop(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName, params PostInstanceActionPRStopParams) error

	// (POST /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/push/resource/info)
	PostInstanceActionPushResourceInfo(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName, params PostInstanceActionPushResourceInfoParams) error

	// (POST /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/restart)
	PostInstanceActionRestart(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName, params PostInstanceActionRestartParams) error

	// (POST /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/run)
	PostInstanceActionRun(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName, params PostInstanceActionRunParams) error

	// (POST /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/shutdown)
	PostInstanceActionShutdown(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName, params PostInstanceActionShutdownParams) error

	// (POST /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/start)
	PostInstanceActionStart(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName, params PostInstanceActionStartParams) error

	// (POST /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/startstandby)
	PostInstanceActionStartStandby(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName, params PostInstanceActionStartStandbyParams) error

	// (POST /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/status)
	PostInstanceActionStatus(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName, params PostInstanceActionStatusParams) error

	// (POST /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/stop)
	PostInstanceActionStop(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName, params PostInstanceActionStopParams) error

	// (POST /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/sync/ingest)
	PostInstanceActionSyncIngest(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName, params PostInstanceActionSyncIngestParams) error

	// (POST /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/unfreeze)
	PostInstanceActionUnfreeze(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName, params PostInstanceActionUnfreezeParams) error

	// (POST /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/unprovision)
	PostInstanceActionUnprovision(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName, params PostInstanceActionUnprovisionParams) error

	// (POST /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/clear)
	PostInstanceClear(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (GET /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/config/file)
	GetInstanceConfigFile(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (GET /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/log)
	GetInstanceLogs(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName, params GetInstanceLogsParams) error

	// (GET /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/resource/info)
	GetInstanceResourceInfo(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (GET /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/schedule)
	GetInstanceSchedule(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (POST /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/state/file)
	PostInstanceStateFile(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (GET /api/node/name/{nodename}/log)
	GetNodeLogs(ctx echo.Context, nodename InPathNodeName, params GetNodeLogsParams) error

	// (GET /api/node/name/{nodename}/ping)
	GetNodePing(ctx echo.Context, nodename InPathNodeName) error

	// (GET /api/node/name/{nodename}/schedule)
	GetNodeSchedule(ctx echo.Context, nodename InPathNodeName) error

	// (GET /api/node/name/{nodename}/ssh/hostkeys)
	GetNodeSSHHostkeys(ctx echo.Context, nodename InPathNodeName) error

	// (GET /api/node/name/{nodename}/ssh/key)
	GetNodeSSHKey(ctx echo.Context, nodename InPathNodeName) error

	// (PUT /api/node/name/{nodename}/ssh/trust)
	PutNodeSSHTrust(ctx echo.Context, nodename InPathNodeName) error

	// (GET /api/node/name/{nodename}/system/disk)
	GetNodeSystemDisk(ctx echo.Context, nodename InPathNodeName) error

	// (GET /api/node/name/{nodename}/system/group)
	GetNodeSystemGroup(ctx echo.Context, nodename InPathNodeName) error

	// (GET /api/node/name/{nodename}/system/hardware)
	GetNodeSystemHardware(ctx echo.Context, nodename InPathNodeName) error

	// (GET /api/node/name/{nodename}/system/ipaddress)
	GetNodeSystemIPAddress(ctx echo.Context, nodename InPathNodeName) error

	// (GET /api/node/name/{nodename}/system/package)
	GetNodeSystemPackage(ctx echo.Context, nodename InPathNodeName) error

	// (GET /api/node/name/{nodename}/system/patch)
	GetNodeSystemPatch(ctx echo.Context, nodename InPathNodeName) error

	// (GET /api/node/name/{nodename}/system/property)
	GetNodeSystemProperty(ctx echo.Context, nodename InPathNodeName) error

	// (GET /api/node/name/{nodename}/system/san/initiator)
	GetNodeSystemSANInitiator(ctx echo.Context, nodename InPathNodeName) error

	// (GET /api/node/name/{nodename}/system/san/path)
	GetNodeSystemSANPath(ctx echo.Context, nodename InPathNodeName) error

	// (GET /api/node/name/{nodename}/system/user)
	GetNodeSystemUser(ctx echo.Context, nodename InPathNodeName) error

	// (GET /api/object)
	GetObjects(ctx echo.Context, params GetObjectsParams) error

	// (GET /api/object/path)
	GetObjectPaths(ctx echo.Context, params GetObjectPathsParams) error

	// (POST /api/object/path/{namespace}/svc/{name}/disable)
	PostSvcDisable(ctx echo.Context, namespace InPathNamespace, name InPathName, params PostSvcDisableParams) error

	// (POST /api/object/path/{namespace}/svc/{name}/enable)
	PostSvcEnable(ctx echo.Context, namespace InPathNamespace, name InPathName, params PostSvcEnableParams) error

	// (GET /api/object/path/{namespace}/{kind}/{name})
	GetObject(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (POST /api/object/path/{namespace}/{kind}/{name}/action/abort)
	PostObjectActionAbort(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (POST /api/object/path/{namespace}/{kind}/{name}/action/delete)
	PostObjectActionDelete(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (POST /api/object/path/{namespace}/{kind}/{name}/action/freeze)
	PostObjectActionFreeze(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (POST /api/object/path/{namespace}/{kind}/{name}/action/giveback)
	PostObjectActionGiveback(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (POST /api/object/path/{namespace}/{kind}/{name}/action/provision)
	PostObjectActionProvision(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (POST /api/object/path/{namespace}/{kind}/{name}/action/purge)
	PostObjectActionPurge(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (POST /api/object/path/{namespace}/{kind}/{name}/action/restart)
	PostObjectActionRestart(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (POST /api/object/path/{namespace}/{kind}/{name}/action/start)
	PostObjectActionStart(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (POST /api/object/path/{namespace}/{kind}/{name}/action/stop)
	PostObjectActionStop(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (POST /api/object/path/{namespace}/{kind}/{name}/action/switch)
	PostObjectActionSwitch(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (POST /api/object/path/{namespace}/{kind}/{name}/action/unfreeze)
	PostObjectActionUnfreeze(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (POST /api/object/path/{namespace}/{kind}/{name}/action/unprovision)
	PostObjectActionUnprovision(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (GET /api/object/path/{namespace}/{kind}/{name}/config)
	GetObjectConfig(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName, params GetObjectConfigParams) error

	// (PATCH /api/object/path/{namespace}/{kind}/{name}/config)
	PatchObjectConfig(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName, params PatchObjectConfigParams) error

	// (GET /api/object/path/{namespace}/{kind}/{name}/config/file)
	GetObjectConfigFile(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (POST /api/object/path/{namespace}/{kind}/{name}/config/file)
	PostObjectConfigFile(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (PUT /api/object/path/{namespace}/{kind}/{name}/config/file)
	PutObjectConfigFile(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (GET /api/object/path/{namespace}/{kind}/{name}/data)
	GetObjectData(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName, params GetObjectDataParams) error

	// (PATCH /api/object/path/{namespace}/{kind}/{name}/data)
	PatchObjectData(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (DELETE /api/object/path/{namespace}/{kind}/{name}/data/key)
	DeleteObjectDataKey(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName, params DeleteObjectDataKeyParams) error

	// (GET /api/object/path/{namespace}/{kind}/{name}/data/key)
	GetObjectDataKey(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName, params GetObjectDataKeyParams) error

	// (POST /api/object/path/{namespace}/{kind}/{name}/data/key)
	PostObjectDataKey(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName, params PostObjectDataKeyParams) error

	// (PUT /api/object/path/{namespace}/{kind}/{name}/data/key)
	PutObjectDataKey(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName, params PutObjectDataKeyParams) error

	// (GET /api/object/path/{namespace}/{kind}/{name}/data/keys)
	GetObjectDataKeys(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (GET /api/object/path/{namespace}/{kind}/{name}/resource/info)
	GetObjectResourceInfo(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (GET /api/object/path/{namespace}/{kind}/{name}/schedule)
	GetObjectSchedule(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (GET /api/openapi)
	GetSwagger(ctx echo.Context) error

	// (GET /api/pool)
	GetPools(ctx echo.Context, params GetPoolsParams) error

	// (GET /api/pool/volume)
	GetPoolVolumes(ctx echo.Context, params GetPoolVolumesParams) error

	// (GET /api/relay/message)
	GetRelayMessage(ctx echo.Context, params GetRelayMessageParams) error

	// (POST /api/relay/message)
	PostRelayMessage(ctx echo.Context) error

	// (GET /api/relay/status)
	GetRelayStatus(ctx echo.Context, params GetRelayStatusParams) error

	// (GET /api/resource)
	GetResources(ctx echo.Context, params GetResourcesParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAuthInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetAuthInfo(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAuthInfo(ctx)
	return err
}

// PostAuthToken converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthToken(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthTokenParams
	// ------------- Optional query parameter "role" -------------

	err = runtime.BindQueryParameter("form", true, false, "role", ctx.QueryParams(), &params.Role)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role: %s", err))
	}

	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// ------------- Optional query parameter "subject" -------------

	err = runtime.BindQueryParameter("form", true, false, "subject", ctx.QueryParams(), &params.Subject)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subject: %s", err))
	}

	// ------------- Optional query parameter "scope" -------------

	err = runtime.BindQueryParameter("form", true, false, "scope", ctx.QueryParams(), &params.Scope)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scope: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAuthToken(ctx, params)
	return err
}

// GetAuthWhoAmI converts echo context to params.
func (w *ServerInterfaceWrapper) GetAuthWhoAmI(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAuthWhoAmI(ctx)
	return err
}

// PostClusterActionAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostClusterActionAbort(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostClusterActionAbort(ctx)
	return err
}

// PostClusterActionFreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostClusterActionFreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostClusterActionFreeze(ctx)
	return err
}

// PostClusterActionUnfreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostClusterActionUnfreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostClusterActionUnfreeze(ctx)
	return err
}

// GetClusterConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetClusterConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetClusterConfigParams
	// ------------- Optional query parameter "evaluate" -------------

	err = runtime.BindQueryParameter("form", true, false, "evaluate", ctx.QueryParams(), &params.Evaluate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter evaluate: %s", err))
	}

	// ------------- Optional query parameter "impersonate" -------------

	err = runtime.BindQueryParameter("form", true, false, "impersonate", ctx.QueryParams(), &params.Impersonate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter impersonate: %s", err))
	}

	// ------------- Optional query parameter "kw" -------------

	err = runtime.BindQueryParameter("form", true, false, "kw", ctx.QueryParams(), &params.Kw)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kw: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetClusterConfig(ctx, params)
	return err
}

// PatchClusterConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PatchClusterConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PatchClusterConfigParams
	// ------------- Optional query parameter "delete" -------------

	err = runtime.BindQueryParameter("form", true, false, "delete", ctx.QueryParams(), &params.Delete)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter delete: %s", err))
	}

	// ------------- Optional query parameter "unset" -------------

	err = runtime.BindQueryParameter("form", true, false, "unset", ctx.QueryParams(), &params.Unset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unset: %s", err))
	}

	// ------------- Optional query parameter "set" -------------

	err = runtime.BindQueryParameter("form", true, false, "set", ctx.QueryParams(), &params.Set)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter set: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchClusterConfig(ctx, params)
	return err
}

// GetClusterConfigFile converts echo context to params.
func (w *ServerInterfaceWrapper) GetClusterConfigFile(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetClusterConfigFile(ctx)
	return err
}

// PutClusterConfigFile converts echo context to params.
func (w *ServerInterfaceWrapper) PutClusterConfigFile(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutClusterConfigFile(ctx)
	return err
}

// PostClusterJoin converts echo context to params.
func (w *ServerInterfaceWrapper) PostClusterJoin(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostClusterJoinParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostClusterJoin(ctx, params)
	return err
}

// PostClusterLeave converts echo context to params.
func (w *ServerInterfaceWrapper) PostClusterLeave(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostClusterLeaveParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostClusterLeave(ctx, params)
	return err
}

// GetClusterStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetClusterStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetClusterStatusParams
	// ------------- Optional query parameter "namespace" -------------

	err = runtime.BindQueryParameter("form", true, false, "namespace", ctx.QueryParams(), &params.Namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Optional query parameter "selector" -------------

	err = runtime.BindQueryParameter("form", true, false, "selector", ctx.QueryParams(), &params.Selector)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter selector: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetClusterStatus(ctx, params)
	return err
}

// GetInstances converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstances(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstancesParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetInstances(ctx, params)
	return err
}

// PostInstanceProgress converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceProgress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstanceProgress(ctx, namespace, kind, name)
	return err
}

// PostInstanceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstanceStatus(ctx, namespace, kind, name)
	return err
}

// GetNetworks converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworks(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNetworksParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNetworks(ctx, params)
	return err
}

// GetNetworkIP converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworkIP(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNetworkIPParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNetworkIP(ctx, params)
	return err
}

// GetNodes converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodes(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodesParams
	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodes(ctx, params)
	return err
}

// GetNodesInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodesInfo(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodesInfo(ctx)
	return err
}

// PostPeerActionAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostPeerActionAbort(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostPeerActionAbort(ctx, nodename)
	return err
}

// PostNodeActionClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeActionClear(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostNodeActionClear(ctx, nodename)
	return err
}

// PostPeerActionDrain converts echo context to params.
func (w *ServerInterfaceWrapper) PostPeerActionDrain(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostPeerActionDrain(ctx, nodename)
	return err
}

// PostPeerActionFreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostPeerActionFreeze(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostPeerActionFreezeParams
	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostPeerActionFreeze(ctx, nodename, params)
	return err
}

// PostNodeActionPushAsset converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeActionPushAsset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeActionPushAssetParams
	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostNodeActionPushAsset(ctx, nodename, params)
	return err
}

// PostNodeActionPushDisk converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeActionPushDisk(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeActionPushDiskParams
	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostNodeActionPushDisk(ctx, nodename, params)
	return err
}

// PostNodeActionPushPatch converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeActionPushPatch(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeActionPushPatchParams
	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostNodeActionPushPatch(ctx, nodename, params)
	return err
}

// PostNodeActionPushPkg converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeActionPushPkg(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeActionPushPkgParams
	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostNodeActionPushPkg(ctx, nodename, params)
	return err
}

// PostNodeActionScanCapabilities converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeActionScanCapabilities(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeActionScanCapabilitiesParams
	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostNodeActionScanCapabilities(ctx, nodename, params)
	return err
}

// PostNodeActionSysreport converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeActionSysreport(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeActionSysreportParams
	// ------------- Optional query parameter "force" -------------

	err = runtime.BindQueryParameter("form", true, false, "force", ctx.QueryParams(), &params.Force)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter force: %s", err))
	}

	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostNodeActionSysreport(ctx, nodename, params)
	return err
}

// PostPeerActionUnfreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostPeerActionUnfreeze(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostPeerActionUnfreezeParams
	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostPeerActionUnfreeze(ctx, nodename, params)
	return err
}

// GetNodeCapabilities converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeCapabilities(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodeCapabilities(ctx, nodename)
	return err
}

// GetNodeConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeConfigParams
	// ------------- Optional query parameter "kw" -------------

	err = runtime.BindQueryParameter("form", true, false, "kw", ctx.QueryParams(), &params.Kw)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kw: %s", err))
	}

	// ------------- Optional query parameter "evaluate" -------------

	err = runtime.BindQueryParameter("form", true, false, "evaluate", ctx.QueryParams(), &params.Evaluate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter evaluate: %s", err))
	}

	// ------------- Optional query parameter "impersonate" -------------

	err = runtime.BindQueryParameter("form", true, false, "impersonate", ctx.QueryParams(), &params.Impersonate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter impersonate: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodeConfig(ctx, nodename, params)
	return err
}

// PatchNodeConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PatchNodeConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PatchNodeConfigParams
	// ------------- Optional query parameter "delete" -------------

	err = runtime.BindQueryParameter("form", true, false, "delete", ctx.QueryParams(), &params.Delete)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter delete: %s", err))
	}

	// ------------- Optional query parameter "unset" -------------

	err = runtime.BindQueryParameter("form", true, false, "unset", ctx.QueryParams(), &params.Unset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unset: %s", err))
	}

	// ------------- Optional query parameter "set" -------------

	err = runtime.BindQueryParameter("form", true, false, "set", ctx.QueryParams(), &params.Set)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter set: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchNodeConfig(ctx, nodename, params)
	return err
}

// GetNodeConfigFile converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeConfigFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodeConfigFile(ctx, nodename)
	return err
}

// PutNodeConfigFile converts echo context to params.
func (w *ServerInterfaceWrapper) PutNodeConfigFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutNodeConfigFile(ctx, nodename)
	return err
}

// PostDaemonRestart converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonRestart(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostDaemonRestart(ctx, nodename)
	return err
}

// PostDaemonShutdown converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonShutdown(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonShutdownParams
	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostDaemonShutdown(ctx, nodename, params)
	return err
}

// PostDaemonStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonStop(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostDaemonStop(ctx, nodename)
	return err
}

// GetDaemonDNSDump converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonDNSDump(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDaemonDNSDump(ctx, nodename)
	return err
}

// GetDaemonEvents converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonEvents(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonEventsParams
	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "cache" -------------

	err = runtime.BindQueryParameter("form", true, false, "cache", ctx.QueryParams(), &params.Cache)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cache: %s", err))
	}

	// ------------- Optional query parameter "selector" -------------

	err = runtime.BindQueryParameter("form", true, false, "selector", ctx.QueryParams(), &params.Selector)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter selector: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDaemonEvents(ctx, nodename, params)
	return err
}

// PostDaemonHeartbeatRestart converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonHeartbeatRestart(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathHeartbeatName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostDaemonHeartbeatRestart(ctx, nodename, name)
	return err
}

// PostDaemonHeartbeatStart converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonHeartbeatStart(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathHeartbeatName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostDaemonHeartbeatStart(ctx, nodename, name)
	return err
}

// PostDaemonHeartbeatStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonHeartbeatStop(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathHeartbeatName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostDaemonHeartbeatStop(ctx, nodename, name)
	return err
}

// PostDaemonListenerRestart converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonListenerRestart(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathListenerName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostDaemonListenerRestart(ctx, nodename, name)
	return err
}

// PostDaemonListenerStart converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonListenerStart(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathListenerName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostDaemonListenerStart(ctx, nodename, name)
	return err
}

// PostDaemonListenerStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonListenerStop(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathListenerName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostDaemonListenerStop(ctx, nodename, name)
	return err
}

// PostDaemonListenerLogControl converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonListenerLogControl(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathListenerName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostDaemonListenerLogControl(ctx, nodename, name)
	return err
}

// PostDaemonLogControl converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLogControl(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostDaemonLogControl(ctx, nodename)
	return err
}

// GetNodeDRBDAllocation converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDAllocation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodeDRBDAllocation(ctx, nodename)
	return err
}

// GetNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodeDRBDConfig(ctx, nodename, params)
	return err
}

// PostNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeDRBDConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostNodeDRBDConfig(ctx, nodename, params)
	return err
}

// GetNodeDriver converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDriver(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodeDriver(ctx, nodename)
	return err
}

// GetInstance converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetInstance(ctx, nodename, namespace, kind, name)
	return err
}

// PostInstanceActionBoot converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceActionBoot(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostInstanceActionBootParams
	// ------------- Optional query parameter "slaves" -------------

	err = runtime.BindQueryParameter("form", true, false, "slaves", ctx.QueryParams(), &params.Slaves)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slaves: %s", err))
	}

	// ------------- Optional query parameter "master" -------------

	err = runtime.BindQueryParameter("form", true, false, "master", ctx.QueryParams(), &params.Master)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter master: %s", err))
	}

	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// ------------- Optional query parameter "rid" -------------

	err = runtime.BindQueryParameter("form", true, false, "rid", ctx.QueryParams(), &params.Rid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rid: %s", err))
	}

	// ------------- Optional query parameter "slave" -------------

	err = runtime.BindQueryParameter("form", true, false, "slave", ctx.QueryParams(), &params.Slave)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slave: %s", err))
	}

	// ------------- Optional query parameter "subset" -------------

	err = runtime.BindQueryParameter("form", true, false, "subset", ctx.QueryParams(), &params.Subset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subset: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstanceActionBoot(ctx, nodename, namespace, kind, name, params)
	return err
}

// PostInstanceActionDelete converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceActionDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostInstanceActionDeleteParams
	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstanceActionDelete(ctx, nodename, namespace, kind, name, params)
	return err
}

// PostInstanceActionFreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceActionFreeze(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostInstanceActionFreezeParams
	// ------------- Optional query parameter "slaves" -------------

	err = runtime.BindQueryParameter("form", true, false, "slaves", ctx.QueryParams(), &params.Slaves)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slaves: %s", err))
	}

	// ------------- Optional query parameter "master" -------------

	err = runtime.BindQueryParameter("form", true, false, "master", ctx.QueryParams(), &params.Master)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter master: %s", err))
	}

	// ------------- Optional query parameter "slave" -------------

	err = runtime.BindQueryParameter("form", true, false, "slave", ctx.QueryParams(), &params.Slave)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slave: %s", err))
	}

	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstanceActionFreeze(ctx, nodename, namespace, kind, name, params)
	return err
}

// PostInstanceActionProvision converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceActionProvision(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostInstanceActionProvisionParams
	// ------------- Optional query parameter "slaves" -------------

	err = runtime.BindQueryParameter("form", true, false, "slaves", ctx.QueryParams(), &params.Slaves)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slaves: %s", err))
	}

	// ------------- Optional query parameter "disable_rollback" -------------

	err = runtime.BindQueryParameter("form", true, false, "disable_rollback", ctx.QueryParams(), &params.DisableRollback)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter disable_rollback: %s", err))
	}

	// ------------- Optional query parameter "force" -------------

	err = runtime.BindQueryParameter("form", true, false, "force", ctx.QueryParams(), &params.Force)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter force: %s", err))
	}

	// ------------- Optional query parameter "leader" -------------

	err = runtime.BindQueryParameter("form", true, false, "leader", ctx.QueryParams(), &params.Leader)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter leader: %s", err))
	}

	// ------------- Optional query parameter "master" -------------

	err = runtime.BindQueryParameter("form", true, false, "master", ctx.QueryParams(), &params.Master)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter master: %s", err))
	}

	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// ------------- Optional query parameter "rid" -------------

	err = runtime.BindQueryParameter("form", true, false, "rid", ctx.QueryParams(), &params.Rid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rid: %s", err))
	}

	// ------------- Optional query parameter "slave" -------------

	err = runtime.BindQueryParameter("form", true, false, "slave", ctx.QueryParams(), &params.Slave)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slave: %s", err))
	}

	// ------------- Optional query parameter "state_only" -------------

	err = runtime.BindQueryParameter("form", true, false, "state_only", ctx.QueryParams(), &params.StateOnly)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state_only: %s", err))
	}

	// ------------- Optional query parameter "subset" -------------

	err = runtime.BindQueryParameter("form", true, false, "subset", ctx.QueryParams(), &params.Subset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subset: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstanceActionProvision(ctx, nodename, namespace, kind, name, params)
	return err
}

// PostInstanceActionPRStart converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceActionPRStart(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostInstanceActionPRStartParams
	// ------------- Optional query parameter "slaves" -------------

	err = runtime.BindQueryParameter("form", true, false, "slaves", ctx.QueryParams(), &params.Slaves)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slaves: %s", err))
	}

	// ------------- Optional query parameter "disable_rollback" -------------

	err = runtime.BindQueryParameter("form", true, false, "disable_rollback", ctx.QueryParams(), &params.DisableRollback)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter disable_rollback: %s", err))
	}

	// ------------- Optional query parameter "force" -------------

	err = runtime.BindQueryParameter("form", true, false, "force", ctx.QueryParams(), &params.Force)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter force: %s", err))
	}

	// ------------- Optional query parameter "master" -------------

	err = runtime.BindQueryParameter("form", true, false, "master", ctx.QueryParams(), &params.Master)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter master: %s", err))
	}

	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// ------------- Optional query parameter "rid" -------------

	err = runtime.BindQueryParameter("form", true, false, "rid", ctx.QueryParams(), &params.Rid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rid: %s", err))
	}

	// ------------- Optional query parameter "slave" -------------

	err = runtime.BindQueryParameter("form", true, false, "slave", ctx.QueryParams(), &params.Slave)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slave: %s", err))
	}

	// ------------- Optional query parameter "subset" -------------

	err = runtime.BindQueryParameter("form", true, false, "subset", ctx.QueryParams(), &params.Subset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subset: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstanceActionPRStart(ctx, nodename, namespace, kind, name, params)
	return err
}

// PostInstanceActionPRStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceActionPRStop(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostInstanceActionPRStopParams
	// ------------- Optional query parameter "slaves" -------------

	err = runtime.BindQueryParameter("form", true, false, "slaves", ctx.QueryParams(), &params.Slaves)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slaves: %s", err))
	}

	// ------------- Optional query parameter "disable_rollback" -------------

	err = runtime.BindQueryParameter("form", true, false, "disable_rollback", ctx.QueryParams(), &params.DisableRollback)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter disable_rollback: %s", err))
	}

	// ------------- Optional query parameter "force" -------------

	err = runtime.BindQueryParameter("form", true, false, "force", ctx.QueryParams(), &params.Force)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter force: %s", err))
	}

	// ------------- Optional query parameter "master" -------------

	err = runtime.BindQueryParameter("form", true, false, "master", ctx.QueryParams(), &params.Master)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter master: %s", err))
	}

	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// ------------- Optional query parameter "rid" -------------

	err = runtime.BindQueryParameter("form", true, false, "rid", ctx.QueryParams(), &params.Rid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rid: %s", err))
	}

	// ------------- Optional query parameter "slave" -------------

	err = runtime.BindQueryParameter("form", true, false, "slave", ctx.QueryParams(), &params.Slave)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slave: %s", err))
	}

	// ------------- Optional query parameter "subset" -------------

	err = runtime.BindQueryParameter("form", true, false, "subset", ctx.QueryParams(), &params.Subset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subset: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstanceActionPRStop(ctx, nodename, namespace, kind, name, params)
	return err
}

// PostInstanceActionPushResourceInfo converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceActionPushResourceInfo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostInstanceActionPushResourceInfoParams
	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstanceActionPushResourceInfo(ctx, nodename, namespace, kind, name, params)
	return err
}

// PostInstanceActionRestart converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceActionRestart(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostInstanceActionRestartParams
	// ------------- Optional query parameter "slaves" -------------

	err = runtime.BindQueryParameter("form", true, false, "slaves", ctx.QueryParams(), &params.Slaves)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slaves: %s", err))
	}

	// ------------- Optional query parameter "disable_rollback" -------------

	err = runtime.BindQueryParameter("form", true, false, "disable_rollback", ctx.QueryParams(), &params.DisableRollback)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter disable_rollback: %s", err))
	}

	// ------------- Optional query parameter "force" -------------

	err = runtime.BindQueryParameter("form", true, false, "force", ctx.QueryParams(), &params.Force)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter force: %s", err))
	}

	// ------------- Optional query parameter "master" -------------

	err = runtime.BindQueryParameter("form", true, false, "master", ctx.QueryParams(), &params.Master)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter master: %s", err))
	}

	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// ------------- Optional query parameter "rid" -------------

	err = runtime.BindQueryParameter("form", true, false, "rid", ctx.QueryParams(), &params.Rid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rid: %s", err))
	}

	// ------------- Optional query parameter "slave" -------------

	err = runtime.BindQueryParameter("form", true, false, "slave", ctx.QueryParams(), &params.Slave)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slave: %s", err))
	}

	// ------------- Optional query parameter "subset" -------------

	err = runtime.BindQueryParameter("form", true, false, "subset", ctx.QueryParams(), &params.Subset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subset: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstanceActionRestart(ctx, nodename, namespace, kind, name, params)
	return err
}

// PostInstanceActionRun converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceActionRun(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostInstanceActionRunParams
	// ------------- Optional query parameter "slaves" -------------

	err = runtime.BindQueryParameter("form", true, false, "slaves", ctx.QueryParams(), &params.Slaves)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slaves: %s", err))
	}

	// ------------- Optional query parameter "confirm" -------------

	err = runtime.BindQueryParameter("form", true, false, "confirm", ctx.QueryParams(), &params.Confirm)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter confirm: %s", err))
	}

	// ------------- Optional query parameter "cron" -------------

	err = runtime.BindQueryParameter("form", true, false, "cron", ctx.QueryParams(), &params.Cron)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cron: %s", err))
	}

	// ------------- Optional query parameter "force" -------------

	err = runtime.BindQueryParameter("form", true, false, "force", ctx.QueryParams(), &params.Force)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter force: %s", err))
	}

	// ------------- Optional query parameter "master" -------------

	err = runtime.BindQueryParameter("form", true, false, "master", ctx.QueryParams(), &params.Master)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter master: %s", err))
	}

	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// ------------- Optional query parameter "rid" -------------

	err = runtime.BindQueryParameter("form", true, false, "rid", ctx.QueryParams(), &params.Rid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rid: %s", err))
	}

	// ------------- Optional query parameter "slave" -------------

	err = runtime.BindQueryParameter("form", true, false, "slave", ctx.QueryParams(), &params.Slave)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slave: %s", err))
	}

	// ------------- Optional query parameter "subset" -------------

	err = runtime.BindQueryParameter("form", true, false, "subset", ctx.QueryParams(), &params.Subset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subset: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// ------------- Optional query parameter "env" -------------

	err = runtime.BindQueryParameter("form", true, false, "env", ctx.QueryParams(), &params.Env)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter env: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstanceActionRun(ctx, nodename, namespace, kind, name, params)
	return err
}

// PostInstanceActionShutdown converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceActionShutdown(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostInstanceActionShutdownParams
	// ------------- Optional query parameter "slaves" -------------

	err = runtime.BindQueryParameter("form", true, false, "slaves", ctx.QueryParams(), &params.Slaves)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slaves: %s", err))
	}

	// ------------- Optional query parameter "force" -------------

	err = runtime.BindQueryParameter("form", true, false, "force", ctx.QueryParams(), &params.Force)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter force: %s", err))
	}

	// ------------- Optional query parameter "master" -------------

	err = runtime.BindQueryParameter("form", true, false, "master", ctx.QueryParams(), &params.Master)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter master: %s", err))
	}

	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// ------------- Optional query parameter "rid" -------------

	err = runtime.BindQueryParameter("form", true, false, "rid", ctx.QueryParams(), &params.Rid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rid: %s", err))
	}

	// ------------- Optional query parameter "slave" -------------

	err = runtime.BindQueryParameter("form", true, false, "slave", ctx.QueryParams(), &params.Slave)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slave: %s", err))
	}

	// ------------- Optional query parameter "subset" -------------

	err = runtime.BindQueryParameter("form", true, false, "subset", ctx.QueryParams(), &params.Subset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subset: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstanceActionShutdown(ctx, nodename, namespace, kind, name, params)
	return err
}

// PostInstanceActionStart converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceActionStart(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostInstanceActionStartParams
	// ------------- Optional query parameter "slaves" -------------

	err = runtime.BindQueryParameter("form", true, false, "slaves", ctx.QueryParams(), &params.Slaves)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slaves: %s", err))
	}

	// ------------- Optional query parameter "disable_rollback" -------------

	err = runtime.BindQueryParameter("form", true, false, "disable_rollback", ctx.QueryParams(), &params.DisableRollback)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter disable_rollback: %s", err))
	}

	// ------------- Optional query parameter "force" -------------

	err = runtime.BindQueryParameter("form", true, false, "force", ctx.QueryParams(), &params.Force)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter force: %s", err))
	}

	// ------------- Optional query parameter "master" -------------

	err = runtime.BindQueryParameter("form", true, false, "master", ctx.QueryParams(), &params.Master)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter master: %s", err))
	}

	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// ------------- Optional query parameter "rid" -------------

	err = runtime.BindQueryParameter("form", true, false, "rid", ctx.QueryParams(), &params.Rid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rid: %s", err))
	}

	// ------------- Optional query parameter "slave" -------------

	err = runtime.BindQueryParameter("form", true, false, "slave", ctx.QueryParams(), &params.Slave)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slave: %s", err))
	}

	// ------------- Optional query parameter "subset" -------------

	err = runtime.BindQueryParameter("form", true, false, "subset", ctx.QueryParams(), &params.Subset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subset: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstanceActionStart(ctx, nodename, namespace, kind, name, params)
	return err
}

// PostInstanceActionStartStandby converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceActionStartStandby(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostInstanceActionStartStandbyParams
	// ------------- Optional query parameter "slaves" -------------

	err = runtime.BindQueryParameter("form", true, false, "slaves", ctx.QueryParams(), &params.Slaves)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slaves: %s", err))
	}

	// ------------- Optional query parameter "disable_rollback" -------------

	err = runtime.BindQueryParameter("form", true, false, "disable_rollback", ctx.QueryParams(), &params.DisableRollback)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter disable_rollback: %s", err))
	}

	// ------------- Optional query parameter "force" -------------

	err = runtime.BindQueryParameter("form", true, false, "force", ctx.QueryParams(), &params.Force)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter force: %s", err))
	}

	// ------------- Optional query parameter "master" -------------

	err = runtime.BindQueryParameter("form", true, false, "master", ctx.QueryParams(), &params.Master)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter master: %s", err))
	}

	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// ------------- Optional query parameter "rid" -------------

	err = runtime.BindQueryParameter("form", true, false, "rid", ctx.QueryParams(), &params.Rid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rid: %s", err))
	}

	// ------------- Optional query parameter "slave" -------------

	err = runtime.BindQueryParameter("form", true, false, "slave", ctx.QueryParams(), &params.Slave)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slave: %s", err))
	}

	// ------------- Optional query parameter "subset" -------------

	err = runtime.BindQueryParameter("form", true, false, "subset", ctx.QueryParams(), &params.Subset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subset: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstanceActionStartStandby(ctx, nodename, namespace, kind, name, params)
	return err
}

// PostInstanceActionStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceActionStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostInstanceActionStatusParams
	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstanceActionStatus(ctx, nodename, namespace, kind, name, params)
	return err
}

// PostInstanceActionStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceActionStop(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostInstanceActionStopParams
	// ------------- Optional query parameter "slaves" -------------

	err = runtime.BindQueryParameter("form", true, false, "slaves", ctx.QueryParams(), &params.Slaves)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slaves: %s", err))
	}

	// ------------- Optional query parameter "force" -------------

	err = runtime.BindQueryParameter("form", true, false, "force", ctx.QueryParams(), &params.Force)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter force: %s", err))
	}

	// ------------- Optional query parameter "master" -------------

	err = runtime.BindQueryParameter("form", true, false, "master", ctx.QueryParams(), &params.Master)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter master: %s", err))
	}

	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// ------------- Optional query parameter "rid" -------------

	err = runtime.BindQueryParameter("form", true, false, "rid", ctx.QueryParams(), &params.Rid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rid: %s", err))
	}

	// ------------- Optional query parameter "slave" -------------

	err = runtime.BindQueryParameter("form", true, false, "slave", ctx.QueryParams(), &params.Slave)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slave: %s", err))
	}

	// ------------- Optional query parameter "subset" -------------

	err = runtime.BindQueryParameter("form", true, false, "subset", ctx.QueryParams(), &params.Subset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subset: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstanceActionStop(ctx, nodename, namespace, kind, name, params)
	return err
}

// PostInstanceActionSyncIngest converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceActionSyncIngest(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostInstanceActionSyncIngestParams
	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// ------------- Optional query parameter "rid" -------------

	err = runtime.BindQueryParameter("form", true, false, "rid", ctx.QueryParams(), &params.Rid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rid: %s", err))
	}

	// ------------- Optional query parameter "subset" -------------

	err = runtime.BindQueryParameter("form", true, false, "subset", ctx.QueryParams(), &params.Subset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subset: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstanceActionSyncIngest(ctx, nodename, namespace, kind, name, params)
	return err
}

// PostInstanceActionUnfreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceActionUnfreeze(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostInstanceActionUnfreezeParams
	// ------------- Optional query parameter "slaves" -------------

	err = runtime.BindQueryParameter("form", true, false, "slaves", ctx.QueryParams(), &params.Slaves)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slaves: %s", err))
	}

	// ------------- Optional query parameter "master" -------------

	err = runtime.BindQueryParameter("form", true, false, "master", ctx.QueryParams(), &params.Master)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter master: %s", err))
	}

	// ------------- Optional query parameter "slave" -------------

	err = runtime.BindQueryParameter("form", true, false, "slave", ctx.QueryParams(), &params.Slave)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slave: %s", err))
	}

	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstanceActionUnfreeze(ctx, nodename, namespace, kind, name, params)
	return err
}

// PostInstanceActionUnprovision converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceActionUnprovision(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostInstanceActionUnprovisionParams
	// ------------- Optional query parameter "slaves" -------------

	err = runtime.BindQueryParameter("form", true, false, "slaves", ctx.QueryParams(), &params.Slaves)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slaves: %s", err))
	}

	// ------------- Optional query parameter "force" -------------

	err = runtime.BindQueryParameter("form", true, false, "force", ctx.QueryParams(), &params.Force)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter force: %s", err))
	}

	// ------------- Optional query parameter "leader" -------------

	err = runtime.BindQueryParameter("form", true, false, "leader", ctx.QueryParams(), &params.Leader)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter leader: %s", err))
	}

	// ------------- Optional query parameter "master" -------------

	err = runtime.BindQueryParameter("form", true, false, "master", ctx.QueryParams(), &params.Master)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter master: %s", err))
	}

	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// ------------- Optional query parameter "rid" -------------

	err = runtime.BindQueryParameter("form", true, false, "rid", ctx.QueryParams(), &params.Rid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rid: %s", err))
	}

	// ------------- Optional query parameter "state_only" -------------

	err = runtime.BindQueryParameter("form", true, false, "state_only", ctx.QueryParams(), &params.StateOnly)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state_only: %s", err))
	}

	// ------------- Optional query parameter "slave" -------------

	err = runtime.BindQueryParameter("form", true, false, "slave", ctx.QueryParams(), &params.Slave)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slave: %s", err))
	}

	// ------------- Optional query parameter "subset" -------------

	err = runtime.BindQueryParameter("form", true, false, "subset", ctx.QueryParams(), &params.Subset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subset: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstanceActionUnprovision(ctx, nodename, namespace, kind, name, params)
	return err
}

// PostInstanceClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceClear(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstanceClear(ctx, nodename, namespace, kind, name)
	return err
}

// GetInstanceConfigFile converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceConfigFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetInstanceConfigFile(ctx, nodename, namespace, kind, name)
	return err
}

// GetInstanceLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "follow" -------------

	err = runtime.BindQueryParameter("form", true, false, "follow", ctx.QueryParams(), &params.Follow)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter follow: %s", err))
	}

	// ------------- Optional query parameter "lines" -------------

	err = runtime.BindQueryParameter("form", true, false, "lines", ctx.QueryParams(), &params.Lines)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter lines: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetInstanceLogs(ctx, nodename, namespace, kind, name, params)
	return err
}

// GetInstanceResourceInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceResourceInfo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetInstanceResourceInfo(ctx, nodename, namespace, kind, name)
	return err
}

// GetInstanceSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetInstanceSchedule(ctx, nodename, namespace, kind, name)
	return err
}

// PostInstanceStateFile converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceStateFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstanceStateFile(ctx, nodename, namespace, kind, name)
	return err
}

// GetNodeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "follow" -------------

	err = runtime.BindQueryParameter("form", true, false, "follow", ctx.QueryParams(), &params.Follow)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter follow: %s", err))
	}

	// ------------- Optional query parameter "lines" -------------

	err = runtime.BindQueryParameter("form", true, false, "lines", ctx.QueryParams(), &params.Lines)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter lines: %s", err))
	}

	// ------------- Optional query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, false, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodeLogs(ctx, nodename, params)
	return err
}

// GetNodePing converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodePing(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodePing(ctx, nodename)
	return err
}

// GetNodeSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodeSchedule(ctx, nodename)
	return err
}

// GetNodeSSHHostkeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeSSHHostkeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodeSSHHostkeys(ctx, nodename)
	return err
}

// GetNodeSSHKey converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeSSHKey(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodeSSHKey(ctx, nodename)
	return err
}

// PutNodeSSHTrust converts echo context to params.
func (w *ServerInterfaceWrapper) PutNodeSSHTrust(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutNodeSSHTrust(ctx, nodename)
	return err
}

// GetNodeSystemDisk converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeSystemDisk(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodeSystemDisk(ctx, nodename)
	return err
}

// GetNodeSystemGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeSystemGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodeSystemGroup(ctx, nodename)
	return err
}

// GetNodeSystemHardware converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeSystemHardware(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodeSystemHardware(ctx, nodename)
	return err
}

// GetNodeSystemIPAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeSystemIPAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodeSystemIPAddress(ctx, nodename)
	return err
}

// GetNodeSystemPackage converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeSystemPackage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodeSystemPackage(ctx, nodename)
	return err
}

// GetNodeSystemPatch converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeSystemPatch(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodeSystemPatch(ctx, nodename)
	return err
}

// GetNodeSystemProperty converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeSystemProperty(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodeSystemProperty(ctx, nodename)
	return err
}

// GetNodeSystemSANInitiator converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeSystemSANInitiator(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodeSystemSANInitiator(ctx, nodename)
	return err
}

// GetNodeSystemSANPath converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeSystemSANPath(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodeSystemSANPath(ctx, nodename)
	return err
}

// GetNodeSystemUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeSystemUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodeSystemUser(ctx, nodename)
	return err
}

// GetObjects converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjects(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectsParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetObjects(ctx, params)
	return err
}

// GetObjectPaths converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectPaths(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectPathsParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetObjectPaths(ctx, params)
	return err
}

// PostSvcDisable converts echo context to params.
func (w *ServerInterfaceWrapper) PostSvcDisable(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostSvcDisableParams
	// ------------- Optional query parameter "rid" -------------

	err = runtime.BindQueryParameter("form", true, false, "rid", ctx.QueryParams(), &params.Rid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rid: %s", err))
	}

	// ------------- Optional query parameter "subset" -------------

	err = runtime.BindQueryParameter("form", true, false, "subset", ctx.QueryParams(), &params.Subset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subset: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSvcDisable(ctx, namespace, name, params)
	return err
}

// PostSvcEnable converts echo context to params.
func (w *ServerInterfaceWrapper) PostSvcEnable(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostSvcEnableParams
	// ------------- Optional query parameter "rid" -------------

	err = runtime.BindQueryParameter("form", true, false, "rid", ctx.QueryParams(), &params.Rid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rid: %s", err))
	}

	// ------------- Optional query parameter "subset" -------------

	err = runtime.BindQueryParameter("form", true, false, "subset", ctx.QueryParams(), &params.Subset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subset: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSvcEnable(ctx, namespace, name, params)
	return err
}

// GetObject converts echo context to params.
func (w *ServerInterfaceWrapper) GetObject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetObject(ctx, namespace, kind, name)
	return err
}

// PostObjectActionAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionAbort(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostObjectActionAbort(ctx, namespace, kind, name)
	return err
}

// PostObjectActionDelete converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostObjectActionDelete(ctx, namespace, kind, name)
	return err
}

// PostObjectActionFreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionFreeze(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostObjectActionFreeze(ctx, namespace, kind, name)
	return err
}

// PostObjectActionGiveback converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionGiveback(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostObjectActionGiveback(ctx, namespace, kind, name)
	return err
}

// PostObjectActionProvision converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionProvision(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostObjectActionProvision(ctx, namespace, kind, name)
	return err
}

// PostObjectActionPurge converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionPurge(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostObjectActionPurge(ctx, namespace, kind, name)
	return err
}

// PostObjectActionRestart converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionRestart(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostObjectActionRestart(ctx, namespace, kind, name)
	return err
}

// PostObjectActionStart converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionStart(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostObjectActionStart(ctx, namespace, kind, name)
	return err
}

// PostObjectActionStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionStop(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostObjectActionStop(ctx, namespace, kind, name)
	return err
}

// PostObjectActionSwitch converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionSwitch(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostObjectActionSwitch(ctx, namespace, kind, name)
	return err
}

// PostObjectActionUnfreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionUnfreeze(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostObjectActionUnfreeze(ctx, namespace, kind, name)
	return err
}

// PostObjectActionUnprovision converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionUnprovision(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostObjectActionUnprovision(ctx, namespace, kind, name)
	return err
}

// GetObjectConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectConfigParams
	// ------------- Optional query parameter "evaluate" -------------

	err = runtime.BindQueryParameter("form", true, false, "evaluate", ctx.QueryParams(), &params.Evaluate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter evaluate: %s", err))
	}

	// ------------- Optional query parameter "impersonate" -------------

	err = runtime.BindQueryParameter("form", true, false, "impersonate", ctx.QueryParams(), &params.Impersonate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter impersonate: %s", err))
	}

	// ------------- Optional query parameter "kw" -------------

	err = runtime.BindQueryParameter("form", true, false, "kw", ctx.QueryParams(), &params.Kw)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kw: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetObjectConfig(ctx, namespace, kind, name, params)
	return err
}

// PatchObjectConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PatchObjectConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PatchObjectConfigParams
	// ------------- Optional query parameter "delete" -------------

	err = runtime.BindQueryParameter("form", true, false, "delete", ctx.QueryParams(), &params.Delete)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter delete: %s", err))
	}

	// ------------- Optional query parameter "unset" -------------

	err = runtime.BindQueryParameter("form", true, false, "unset", ctx.QueryParams(), &params.Unset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unset: %s", err))
	}

	// ------------- Optional query parameter "set" -------------

	err = runtime.BindQueryParameter("form", true, false, "set", ctx.QueryParams(), &params.Set)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter set: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchObjectConfig(ctx, namespace, kind, name, params)
	return err
}

// GetObjectConfigFile converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectConfigFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetObjectConfigFile(ctx, namespace, kind, name)
	return err
}

// PostObjectConfigFile converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectConfigFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostObjectConfigFile(ctx, namespace, kind, name)
	return err
}

// PutObjectConfigFile converts echo context to params.
func (w *ServerInterfaceWrapper) PutObjectConfigFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutObjectConfigFile(ctx, namespace, kind, name)
	return err
}

// GetObjectData converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectDataParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Names)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetObjectData(ctx, namespace, kind, name, params)
	return err
}

// PatchObjectData converts echo context to params.
func (w *ServerInterfaceWrapper) PatchObjectData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchObjectData(ctx, namespace, kind, name)
	return err
}

// DeleteObjectDataKey converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteObjectDataKey(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteObjectDataKeyParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteObjectDataKey(ctx, namespace, kind, name, params)
	return err
}

// GetObjectDataKey converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectDataKey(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectDataKeyParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetObjectDataKey(ctx, namespace, kind, name, params)
	return err
}

// PostObjectDataKey converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectDataKey(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostObjectDataKeyParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostObjectDataKey(ctx, namespace, kind, name, params)
	return err
}

// PutObjectDataKey converts echo context to params.
func (w *ServerInterfaceWrapper) PutObjectDataKey(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PutObjectDataKeyParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutObjectDataKey(ctx, namespace, kind, name, params)
	return err
}

// GetObjectDataKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectDataKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetObjectDataKeys(ctx, namespace, kind, name)
	return err
}

// GetObjectResourceInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectResourceInfo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetObjectResourceInfo(ctx, namespace, kind, name)
	return err
}

// GetObjectSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetObjectSchedule(ctx, namespace, kind, name)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPools(ctx, params)
	return err
}

// GetPoolVolumes converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolVolumes(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolVolumesParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPoolVolumes(ctx, params)
	return err
}

// GetRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) GetRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRelayMessageParams
	// ------------- Required query parameter "nodename" -------------

	err = runtime.BindQueryParameter("form", true, true, "nodename", ctx.QueryParams(), &params.Nodename)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Required query parameter "cluster_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "cluster_id", ctx.QueryParams(), &params.ClusterID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cluster_id: %s", err))
	}

	// ------------- Optional query parameter "username" -------------

	err = runtime.BindQueryParameter("form", true, false, "username", ctx.QueryParams(), &params.Username)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter username: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRelayMessage(ctx, params)
	return err
}

// PostRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) PostRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostRelayMessage(ctx)
	return err
}

// GetRelayStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetRelayStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRelayStatusParams
	// ------------- Optional query parameter "relay" -------------

	err = runtime.BindQueryParameter("form", true, false, "relay", ctx.QueryParams(), &params.Relays)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter relay: %s", err))
	}

	// ------------- Optional query parameter "remote" -------------

	err = runtime.BindQueryParameter("form", true, false, "remote", ctx.QueryParams(), &params.Remote)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter remote: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRelayStatus(ctx, params)
	return err
}

// GetResources converts echo context to params.
func (w *ServerInterfaceWrapper) GetResources(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetResourcesParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// ------------- Optional query parameter "resource" -------------

	err = runtime.BindQueryParameter("form", true, false, "resource", ctx.QueryParams(), &params.Resource)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetResources(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/auth/info", wrapper.GetAuthInfo)
	router.POST(baseURL+"/api/auth/token", wrapper.PostAuthToken)
	router.GET(baseURL+"/api/auth/whoami", wrapper.GetAuthWhoAmI)
	router.POST(baseURL+"/api/cluster/action/abort", wrapper.PostClusterActionAbort)
	router.POST(baseURL+"/api/cluster/action/freeze", wrapper.PostClusterActionFreeze)
	router.POST(baseURL+"/api/cluster/action/unfreeze", wrapper.PostClusterActionUnfreeze)
	router.GET(baseURL+"/api/cluster/config", wrapper.GetClusterConfig)
	router.PATCH(baseURL+"/api/cluster/config", wrapper.PatchClusterConfig)
	router.GET(baseURL+"/api/cluster/config/file", wrapper.GetClusterConfigFile)
	router.PUT(baseURL+"/api/cluster/config/file", wrapper.PutClusterConfigFile)
	router.POST(baseURL+"/api/cluster/join", wrapper.PostClusterJoin)
	router.POST(baseURL+"/api/cluster/leave", wrapper.PostClusterLeave)
	router.GET(baseURL+"/api/cluster/status", wrapper.GetClusterStatus)
	router.GET(baseURL+"/api/instance", wrapper.GetInstances)
	router.POST(baseURL+"/api/instance/path/:namespace/:kind/:name/progress", wrapper.PostInstanceProgress)
	router.POST(baseURL+"/api/instance/path/:namespace/:kind/:name/status", wrapper.PostInstanceStatus)
	router.GET(baseURL+"/api/network", wrapper.GetNetworks)
	router.GET(baseURL+"/api/network/ip", wrapper.GetNetworkIP)
	router.GET(baseURL+"/api/node", wrapper.GetNodes)
	router.GET(baseURL+"/api/node/info", wrapper.GetNodesInfo)
	router.POST(baseURL+"/api/node/name/:nodename/action/abort", wrapper.PostPeerActionAbort)
	router.POST(baseURL+"/api/node/name/:nodename/action/clear", wrapper.PostNodeActionClear)
	router.POST(baseURL+"/api/node/name/:nodename/action/drain", wrapper.PostPeerActionDrain)
	router.POST(baseURL+"/api/node/name/:nodename/action/freeze", wrapper.PostPeerActionFreeze)
	router.POST(baseURL+"/api/node/name/:nodename/action/push/asset", wrapper.PostNodeActionPushAsset)
	router.POST(baseURL+"/api/node/name/:nodename/action/push/disk", wrapper.PostNodeActionPushDisk)
	router.POST(baseURL+"/api/node/name/:nodename/action/push/patch", wrapper.PostNodeActionPushPatch)
	router.POST(baseURL+"/api/node/name/:nodename/action/push/pkg", wrapper.PostNodeActionPushPkg)
	router.POST(baseURL+"/api/node/name/:nodename/action/scan/capabilities", wrapper.PostNodeActionScanCapabilities)
	router.POST(baseURL+"/api/node/name/:nodename/action/sysreport", wrapper.PostNodeActionSysreport)
	router.POST(baseURL+"/api/node/name/:nodename/action/unfreeze", wrapper.PostPeerActionUnfreeze)
	router.GET(baseURL+"/api/node/name/:nodename/capabilities", wrapper.GetNodeCapabilities)
	router.GET(baseURL+"/api/node/name/:nodename/config", wrapper.GetNodeConfig)
	router.PATCH(baseURL+"/api/node/name/:nodename/config", wrapper.PatchNodeConfig)
	router.GET(baseURL+"/api/node/name/:nodename/config/file", wrapper.GetNodeConfigFile)
	router.PUT(baseURL+"/api/node/name/:nodename/config/file", wrapper.PutNodeConfigFile)
	router.POST(baseURL+"/api/node/name/:nodename/daemon/action/restart", wrapper.PostDaemonRestart)
	router.POST(baseURL+"/api/node/name/:nodename/daemon/action/shutdown", wrapper.PostDaemonShutdown)
	router.POST(baseURL+"/api/node/name/:nodename/daemon/action/stop", wrapper.PostDaemonStop)
	router.GET(baseURL+"/api/node/name/:nodename/daemon/dns/dump", wrapper.GetDaemonDNSDump)
	router.GET(baseURL+"/api/node/name/:nodename/daemon/event", wrapper.GetDaemonEvents)
	router.POST(baseURL+"/api/node/name/:nodename/daemon/hb/name/:name/action/restart", wrapper.PostDaemonHeartbeatRestart)
	router.POST(baseURL+"/api/node/name/:nodename/daemon/hb/name/:name/action/start", wrapper.PostDaemonHeartbeatStart)
	router.POST(baseURL+"/api/node/name/:nodename/daemon/hb/name/:name/action/stop", wrapper.PostDaemonHeartbeatStop)
	router.POST(baseURL+"/api/node/name/:nodename/daemon/listener/name/:name/action/restart", wrapper.PostDaemonListenerRestart)
	router.POST(baseURL+"/api/node/name/:nodename/daemon/listener/name/:name/action/start", wrapper.PostDaemonListenerStart)
	router.POST(baseURL+"/api/node/name/:nodename/daemon/listener/name/:name/action/stop", wrapper.PostDaemonListenerStop)
	router.POST(baseURL+"/api/node/name/:nodename/daemon/listener/name/:name/log/control", wrapper.PostDaemonListenerLogControl)
	router.POST(baseURL+"/api/node/name/:nodename/daemon/log/control", wrapper.PostDaemonLogControl)
	router.GET(baseURL+"/api/node/name/:nodename/drbd/allocation", wrapper.GetNodeDRBDAllocation)
	router.GET(baseURL+"/api/node/name/:nodename/drbd/config", wrapper.GetNodeDRBDConfig)
	router.POST(baseURL+"/api/node/name/:nodename/drbd/config", wrapper.PostNodeDRBDConfig)
	router.GET(baseURL+"/api/node/name/:nodename/drivers", wrapper.GetNodeDriver)
	router.GET(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name", wrapper.GetInstance)
	router.POST(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/action/boot", wrapper.PostInstanceActionBoot)
	router.POST(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/action/delete", wrapper.PostInstanceActionDelete)
	router.POST(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/action/freeze", wrapper.PostInstanceActionFreeze)
	router.POST(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/action/provision", wrapper.PostInstanceActionProvision)
	router.POST(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/action/prstart", wrapper.PostInstanceActionPRStart)
	router.POST(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/action/prstop", wrapper.PostInstanceActionPRStop)
	router.POST(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/action/push/resource/info", wrapper.PostInstanceActionPushResourceInfo)
	router.POST(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/action/restart", wrapper.PostInstanceActionRestart)
	router.POST(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/action/run", wrapper.PostInstanceActionRun)
	router.POST(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/action/shutdown", wrapper.PostInstanceActionShutdown)
	router.POST(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/action/start", wrapper.PostInstanceActionStart)
	router.POST(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/action/startstandby", wrapper.PostInstanceActionStartStandby)
	router.POST(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/action/status", wrapper.PostInstanceActionStatus)
	router.POST(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/action/stop", wrapper.PostInstanceActionStop)
	router.POST(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/action/sync/ingest", wrapper.PostInstanceActionSyncIngest)
	router.POST(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/action/unfreeze", wrapper.PostInstanceActionUnfreeze)
	router.POST(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/action/unprovision", wrapper.PostInstanceActionUnprovision)
	router.POST(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/clear", wrapper.PostInstanceClear)
	router.GET(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/config/file", wrapper.GetInstanceConfigFile)
	router.GET(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/log", wrapper.GetInstanceLogs)
	router.GET(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/resource/info", wrapper.GetInstanceResourceInfo)
	router.GET(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/schedule", wrapper.GetInstanceSchedule)
	router.POST(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/state/file", wrapper.PostInstanceStateFile)
	router.GET(baseURL+"/api/node/name/:nodename/log", wrapper.GetNodeLogs)
	router.GET(baseURL+"/api/node/name/:nodename/ping", wrapper.GetNodePing)
	router.GET(baseURL+"/api/node/name/:nodename/schedule", wrapper.GetNodeSchedule)
	router.GET(baseURL+"/api/node/name/:nodename/ssh/hostkeys", wrapper.GetNodeSSHHostkeys)
	router.GET(baseURL+"/api/node/name/:nodename/ssh/key", wrapper.GetNodeSSHKey)
	router.PUT(baseURL+"/api/node/name/:nodename/ssh/trust", wrapper.PutNodeSSHTrust)
	router.GET(baseURL+"/api/node/name/:nodename/system/disk", wrapper.GetNodeSystemDisk)
	router.GET(baseURL+"/api/node/name/:nodename/system/group", wrapper.GetNodeSystemGroup)
	router.GET(baseURL+"/api/node/name/:nodename/system/hardware", wrapper.GetNodeSystemHardware)
	router.GET(baseURL+"/api/node/name/:nodename/system/ipaddress", wrapper.GetNodeSystemIPAddress)
	router.GET(baseURL+"/api/node/name/:nodename/system/package", wrapper.GetNodeSystemPackage)
	router.GET(baseURL+"/api/node/name/:nodename/system/patch", wrapper.GetNodeSystemPatch)
	router.GET(baseURL+"/api/node/name/:nodename/system/property", wrapper.GetNodeSystemProperty)
	router.GET(baseURL+"/api/node/name/:nodename/system/san/initiator", wrapper.GetNodeSystemSANInitiator)
	router.GET(baseURL+"/api/node/name/:nodename/system/san/path", wrapper.GetNodeSystemSANPath)
	router.GET(baseURL+"/api/node/name/:nodename/system/user", wrapper.GetNodeSystemUser)
	router.GET(baseURL+"/api/object", wrapper.GetObjects)
	router.GET(baseURL+"/api/object/path", wrapper.GetObjectPaths)
	router.POST(baseURL+"/api/object/path/:namespace/svc/:name/disable", wrapper.PostSvcDisable)
	router.POST(baseURL+"/api/object/path/:namespace/svc/:name/enable", wrapper.PostSvcEnable)
	router.GET(baseURL+"/api/object/path/:namespace/:kind/:name", wrapper.GetObject)
	router.POST(baseURL+"/api/object/path/:namespace/:kind/:name/action/abort", wrapper.PostObjectActionAbort)
	router.POST(baseURL+"/api/object/path/:namespace/:kind/:name/action/delete", wrapper.PostObjectActionDelete)
	router.POST(baseURL+"/api/object/path/:namespace/:kind/:name/action/freeze", wrapper.PostObjectActionFreeze)
	router.POST(baseURL+"/api/object/path/:namespace/:kind/:name/action/giveback", wrapper.PostObjectActionGiveback)
	router.POST(baseURL+"/api/object/path/:namespace/:kind/:name/action/provision", wrapper.PostObjectActionProvision)
	router.POST(baseURL+"/api/object/path/:namespace/:kind/:name/action/purge", wrapper.PostObjectActionPurge)
	router.POST(baseURL+"/api/object/path/:namespace/:kind/:name/action/restart", wrapper.PostObjectActionRestart)
	router.POST(baseURL+"/api/object/path/:namespace/:kind/:name/action/start", wrapper.PostObjectActionStart)
	router.POST(baseURL+"/api/object/path/:namespace/:kind/:name/action/stop", wrapper.PostObjectActionStop)
	router.POST(baseURL+"/api/object/path/:namespace/:kind/:name/action/switch", wrapper.PostObjectActionSwitch)
	router.POST(baseURL+"/api/object/path/:namespace/:kind/:name/action/unfreeze", wrapper.PostObjectActionUnfreeze)
	router.POST(baseURL+"/api/object/path/:namespace/:kind/:name/action/unprovision", wrapper.PostObjectActionUnprovision)
	router.GET(baseURL+"/api/object/path/:namespace/:kind/:name/config", wrapper.GetObjectConfig)
	router.PATCH(baseURL+"/api/object/path/:namespace/:kind/:name/config", wrapper.PatchObjectConfig)
	router.GET(baseURL+"/api/object/path/:namespace/:kind/:name/config/file", wrapper.GetObjectConfigFile)
	router.POST(baseURL+"/api/object/path/:namespace/:kind/:name/config/file", wrapper.PostObjectConfigFile)
	router.PUT(baseURL+"/api/object/path/:namespace/:kind/:name/config/file", wrapper.PutObjectConfigFile)
	router.GET(baseURL+"/api/object/path/:namespace/:kind/:name/data", wrapper.GetObjectData)
	router.PATCH(baseURL+"/api/object/path/:namespace/:kind/:name/data", wrapper.PatchObjectData)
	router.DELETE(baseURL+"/api/object/path/:namespace/:kind/:name/data/key", wrapper.DeleteObjectDataKey)
	router.GET(baseURL+"/api/object/path/:namespace/:kind/:name/data/key", wrapper.GetObjectDataKey)
	router.POST(baseURL+"/api/object/path/:namespace/:kind/:name/data/key", wrapper.PostObjectDataKey)
	router.PUT(baseURL+"/api/object/path/:namespace/:kind/:name/data/key", wrapper.PutObjectDataKey)
	router.GET(baseURL+"/api/object/path/:namespace/:kind/:name/data/keys", wrapper.GetObjectDataKeys)
	router.GET(baseURL+"/api/object/path/:namespace/:kind/:name/resource/info", wrapper.GetObjectResourceInfo)
	router.GET(baseURL+"/api/object/path/:namespace/:kind/:name/schedule", wrapper.GetObjectSchedule)
	router.GET(baseURL+"/api/openapi", wrapper.GetSwagger)
	router.GET(baseURL+"/api/pool", wrapper.GetPools)
	router.GET(baseURL+"/api/pool/volume", wrapper.GetPoolVolumes)
	router.GET(baseURL+"/api/relay/message", wrapper.GetRelayMessage)
	router.POST(baseURL+"/api/relay/message", wrapper.PostRelayMessage)
	router.GET(baseURL+"/api/relay/status", wrapper.GetRelayStatus)
	router.GET(baseURL+"/api/resource", wrapper.GetResources)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/wcAAP//lOgLDtQyAgA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
